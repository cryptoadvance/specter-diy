from unittest import TestCase
from .util import get_keystore, get_wallets_app, clear_testdir
from bitcoin.liquid.networks import NETWORKS
from bitcoin.liquid.pset import PSET
from bitcoin.psbt import PSBT
from bitcoin.psbtview import PSBTView
from bitcoin.liquid.psetview import PSETView
from io import BytesIO

PSBTS = {
    # type: (unsigned, signed)
    "wpkh": (
        "cHNidP8BAHECAAAAAWzGfenb3RfMnjMnbG3ma7oQc2hXxtwJfVVmgrnWm+4UAQAAAAD9////AtYbLAQAAAAAFgAUrNujDLwLZgayRWvplXj9l9JCeCWAlpgAAAAAABYAFCwSoUTerJLG437IpfbWF8DgWx6kAAAAAAABAHECAAAAAYWnVTba+0vAveezgcq1RYQ/kgJWaR18whFlaiyB21+IAQAAAAD9////AoCWmAAAAAAAFgAULBKhRN6sksbjfsil9tYXwOBbHqTkssQEAAAAABYAFB8nluuilYNXa/NkD0Yl26S/P0uNAAAAAAEBH+SyxAQAAAAAFgAUHyeW66KVg1dr82QPRiXbpL8/S40iBgIaiZEUrL8SsjMa8kjotFVJqjhEQ9YTjOUqkhEyemGmNhj7fB8RVAAAgAEAAIAAAACAAQAAAAIAAAAAIgID2bmiDcc2vHCuHg7T/C0YXLPanHBaS665367wqdHd9AgY+3wfEVQAAIABAACAAAAAgAEAAAAEAAAAAAA=",
        "cHNidP8BAHECAAAAAWzGfenb3RfMnjMnbG3ma7oQc2hXxtwJfVVmgrnWm+4UAQAAAAD9////AtYbLAQAAAAAFgAUrNujDLwLZgayRWvplXj9l9JCeCWAlpgAAAAAABYAFCwSoUTerJLG437IpfbWF8DgWx6kAAAAAAAiAgIaiZEUrL8SsjMa8kjotFVJqjhEQ9YTjOUqkhEyemGmNkcwRAIgNOT0EGYtB5Qk/sbVAJ0PDZzDcRekwbrayYYUrl3UNgwCIB0hXw26uT9UkyfUSHnSoRJmBi1XZxOYKhH30TrAUi8NAQAAAA=="
    ),
    "sh-wpkh": (
        "cHNidP8BAHICAAAAAWBIbAlD3qho0taVR9yfW3WJwbKcYRv/xyk9I+abUvlCAQAAAAD9////AkBLTAAAAAAAFgAUb6AWUAo8anN+uyYOLdyni6kjRViZSkwAAAAAABepFHnJuo6ORHutCRGwIDdTRBY6M8EuhwAAAAAAAQByAgAAAAHVQM5/vQoGMhr7e/PH4p2Tf9gXHVPtHJfiO1EqDWQMngEAAAAA/v///wJ9xOAKAAAAABYAFNxjOYrYgc0vzoyl79Z63hqrE3QBgJaYAAAAAAAXqRQ8MfB0SM8tY2KH5v3Ga0t2tM7ooIcAAAAAAQEggJaYAAAAAAAXqRQ8MfB0SM8tY2KH5v3Ga0t2tM7ooIcBBBYAFK6BTdJzSK7KokJmZ1fjLTNWu8qjIgYDioMVrQaIBFMr18KKVcfo+ceMcVxDLl97yc2tXBbAHI8Y+3wfETEAAIABAACAAAAAgAAAAAAAAAAAAAABABYAFFUnXeVBP1OyELX2i5VjTnCna9PLIgICrnKgjc/Cy02bVPD8jfANnmyDUdVA78RKcxyHA+zIRy4Y+3wfETEAAIABAACAAAAAgAEAAAAAAAAAAA==",
        "",
    ),
}

PSETS = {
    "wpkh": ("","")
}

class SignTest(TestCase):

    def test_basic(self):
        """Basic signing of the PSBT"""
        clear_testdir()
        ks = get_keystore(mnemonic="ability "*11+"acid", password="")
        wapp = get_wallets_app(ks, 'regtest')
        # at this stage only wpkh wallet exists
        # so this tx be parsed and signed just fine
        unsigned, signed = PSBTS["wpkh"]
        psbt = PSBT.from_string(unsigned)
        s = BytesIO(psbt.to_string().encode())
        # check it can sign b64-psbt
        self.assertTrue(wapp.can_process(s))
        # check it can sign raw psbt
        s = BytesIO(psbt.serialize())
        self.assertTrue(wapp.can_process(s))

        fout = BytesIO()
        wallets, meta = wapp.manager.preprocess_psbt(s, fout)

        # found a wallet
        self.assertEqual(len(wallets), 1)
        self.assertTrue(wapp.manager.wallets[0] in wallets)

        fout.seek(0)
        psbtv = PSBTView.view(fout)

        b = BytesIO()
        sig_count = wapp.manager.sign_psbtview(psbtv, b, wallets, None)
        self.assertEqual(PSBT.parse(b.getvalue()).to_string(), signed)

    def test_pset(self):
        clear_testdir()
        mnemonic = "ceiling retire saddle forest engine address fancy option fruit destroy grid strategy"
        ks = get_keystore(mnemonic=mnemonic, password="")
        wapp = get_wallets_app(ks, 'elementsregtest')
        # at this stage only wpkh wallet exists
        # so this tx be parsed and signed just fine
        unsigned, signed = PSETS["wpkh"]
        psbt = PSET.from_string(unsigned)
        for inp in psbt.inputs:
            if inp.range_proof:
                inp.asset = None
                inp.value = None
                inp.asset_blinding_factor = None
                inp.value_blinding_factor = None
        for out in psbt.outputs:
            out.asset_blinding_factor = None
            out.value_blinding_factor = None
            out.asset_commitment = None
            out.value_commitment = None
            out.range_proof = None
            out.surjection_proof = None

        s = BytesIO(psbt.to_string().encode())
        # check it can sign b64-psbt
        self.assertTrue(wapp.can_process(s))
        # check it can sign raw psbt
        s = BytesIO(psbt.serialize())
        self.assertTrue(wapp.can_process(s))

        del psbt

        fout = BytesIO()
        wallets, meta = wapp.manager.preprocess_psbt(s, fout)

        # found a wallet
        self.assertEqual(len(wallets), 1)
        self.assertTrue(wapp.manager.wallets[0] in wallets)

        fout.seek(0)
        psbtv = PSETView.view(fout)

        psbt = PSET.from_string(unsigned)
        for inp in psbt.inputs:
            inp.range_proof = None
        psbt2 = PSET.parse(fout.getvalue())
        for inp1, inp2 in zip(psbt.inputs, psbt2.inputs):
            self.assertEqual(inp1, inp2)
        for out1, out2 in zip(psbt.outputs, psbt2.outputs):
            self.assertEqual(out1.range_proof, out2.range_proof)
            self.assertEqual(out1.surjection_proof, out2.surjection_proof)
            self.assertEqual(out1.asset_commitment, out2.asset_commitment)
            self.assertEqual(out1.value_commitment, out2.value_commitment)
            self.assertEqual(out1.asset_blinding_factor, out2.asset_blinding_factor)
            self.assertEqual(out1.value_blinding_factor, out2.value_blinding_factor)
