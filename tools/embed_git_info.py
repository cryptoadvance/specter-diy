#!/usr/bin/env python3
"""Generate git metadata for embedding into frozen MicroPython modules."""

from __future__ import annotations

import argparse
import subprocess
from pathlib import Path
from typing import Optional

UNKNOWN_VALUE = "unknown"


def _run_git(args: list[str]) -> Optional[str]:
    try:
        result = subprocess.check_output(["git", *args], stderr=subprocess.DEVNULL)
    except (OSError, subprocess.CalledProcessError):
        return None
    return result.decode().strip() or None


def discover_repository() -> str:
    repo = _run_git(["config", "--get", "remote.origin.url"])
    if repo:
        return repo
    path = _run_git(["rev-parse", "--show-toplevel"])
    return path or UNKNOWN_VALUE


def discover_branch() -> str:
    branch = _run_git(["rev-parse", "--abbrev-ref", "HEAD"])
    if branch and branch != "HEAD":
        return branch
    describe = _run_git(["describe", "--all"])
    if describe:
        return describe
    return "detached"


def discover_commit() -> str:
    commit = _run_git(["rev-parse", "--short", "HEAD"])
    if commit:
        return commit
    return UNKNOWN_VALUE


def build_content(repository: str, branch: str, commit: str) -> str:
    return (
        "# This file is auto-generated by tools/embed_git_info.py\n"
        "REPOSITORY = %r\n"
        "BRANCH = %r\n"
        "COMMIT = %r\n" % (repository, branch, commit)
    )


def write_git_info(path: Path) -> None:
    repository = discover_repository()
    branch = discover_branch()
    commit = discover_commit()

    content = build_content(repository, branch, commit)

    path.parent.mkdir(parents=True, exist_ok=True)

    try:
        existing = path.read_text()
    except FileNotFoundError:
        existing = None

    if existing == content:
        return

    path.write_text(content)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "output",
        nargs="?",
        default="src/git_info.py",
        help="path to the generated git_info module",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    write_git_info(Path(args.output))


if __name__ == "__main__":
    main()
